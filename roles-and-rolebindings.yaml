# Roles and RoleBinginds

# Docs: https://kubernetes.io/docs/reference/access-authn-authz/rbac/

# Create the necessary roles and role bindings required for the dev-user to create, list and delete pods/deployments in the default namespace.

# Use the given spec:

# Role: developer
# Role Resources: pods and deployments
# Role Actions: list
# Role Actions: create
# Role Actions: delete

# RoleBinding: dev-user-binding
# RoleBinding: Bound to dev-user

# Commands:

# kubectl get/describe roles -n <namespace>
# kubectl get/describe rolebindings -n <namespace>
# kubectl api-resources -o wide

# kubectl get/describe pods -n <namespace> --as dev-user # Impersonation lets you invoke any command as a different user to test permissions. 

# nano role+rolebinding.yaml
# kubectl apply -f role+rolebinding.yaml

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: development
  name: developer
rules:
- apiGroups: ["", "deployments"] # "" indicates the core and apps API groups.
  resources: ["pods", "deployments"]
  verbs: ["list", "create", "delete"]
---
# This role binding allows "dev-user" to list, create and delete pods/deployments in the "development" namespace.
# You need to already have a ClusterRole named "secret-reader".
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: dev-user-binding
  namespace: development # The namespace of the RoleBinding determines where the permissions are granted. This only grants permissions within the "development" namespace.
subjects:
- kind: User
  name: dev-user # Name is case sensitive.
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: developer
  apiGroup: rbac.authorization.k8s.io
